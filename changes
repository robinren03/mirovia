src/cuda/common/main.cpp
- added -outputFile option to write benchmark results to a file instead of stdout
- added -inputFile option to read data from a file
- changed the output from ResultDatabase.DumpDetailed() to ResultDatabase.DumpSummary()

data/
- the idea of having a datagen for certain benchmarks is to allow the user to customize the benchmark to their needs, rather than having to use a limit amount of preset data sizes with a fixed configuration
- replacing Rodinia benchmark datagens with python version for consistency (SHOC benchmark datagens are in python)
- adding datagen to SHOC benchmarks
- user can either
    1. specify a problem size or
    2. specify an input file generated by the datagen

driver.py
- allows the use to run the entire benchmark suite with one command
- driver options:
    - prefix (location of mirovia root)
    - problem size to run benchmarks with
    - device
    - list of benchmarks to run
- can run all or subset of benchmarks
- write benchmark output to results/ folder
- TODO: determine a problem size based on device capabilities
- TODO: calculate & output umbrella result from ResultDB

Device Memory
- when testing device memory capabilities, increased max size to 1GB (from 64MB)

MaxFlops
- added half precision tests using <short> (if compute capability supports this)
- renamed tests so the type of precision is at the beginning of the name

Sort
- added functionality to read data from a file (TODO: error checking)
- if using preset problem size, use rand() to fill array (instead of i % 1024)
- datagen.py options:
    - seed for random number generator
    - size of array

Spmv
- took out "symmetric" flag to indicate that matrix is symmetrical
- datagen.py options:
    - seed for random number generator
    - number of rows in matrix
    - number of cols in matrix
    - max value in matrix
    - 'pattern' flag for allowing common/Spmv/util to generate elements following a pattern

Gemm
- added functionality to read data from a file (+ error checking)
- moved data size option (in kb) to datagen.py
- datagen.py options:
    - seed for random number generator
    - size of matrix (in kb)

Stencil2D
- changed -customSize option to -matrixRows and -matrixCols (more intuitive for user)
- changed -lsize option to -blockRows and -blockCols (more intuitive for user)
- NO DATAGEN. the purpose of datagen is to allow a high level of customization, but the benchmark already has enough options to allow for that (matrix size, weights, etc.) without a datagen

Backprop (originally Rodinia)
- incorporated benchmark into existing build and run framework
- changed file extensions to .cpp, refactored "extern" functions into an #include statement
- updated deprecated syntax from 1994
- added options to OptionParser
    - layer size
    - seed
- added preset problem sizes (layer_size)

Particle Filter
- Didn't include the use_fast_math flag (from testing it only adds ~0.3% speed improvement)
- Kept float and naive as separate binaries, (difficult to merge them into single with a flag)

Rodinia is heavily fragmented with each benchmark living in it's own bubble (specifies its own arch value, own location for /usr/local/cuda)
we're bringing the uniformity of shoc (get all config info from universal source) over to rodinia

We did our best to choose benchmarks that not only cover all 9 primitives, but also cover a wide variety of application domains where GPUs are dominating.
